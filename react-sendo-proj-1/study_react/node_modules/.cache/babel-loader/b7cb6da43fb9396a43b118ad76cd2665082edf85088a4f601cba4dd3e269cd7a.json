{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Documents\\\\Coding\\\\react-sendo-proj-1\\\\study_react\\\\src\\\\components\\\\bar-form\\\\CreateForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './CreateForm.css';\n\n// Component for general messages (success and error)\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst GeneralMessages = ({\n  successMessage,\n  generalError,\n  showDuplicateConfirm,\n  setShowDuplicateConfirm,\n  /*setPendingProduct,*/\n  setFormData,\n  setErrors,\n  setSuccessMessage,\n  setGeneralError,\n  formData,\n  errors,\n  handleSubmit,\n  validateGeneralCriteria\n}) => {\n  /* const handleDuplicateConfirm = async (pendingProduct) => {\r\n       try {\r\n           const res = await fetch(\"http://localhost:8080/products\", {\r\n               method: 'POST',\r\n               headers: {\r\n                   'Content-Type': 'application/json',\r\n               },\r\n               body: JSON.stringify(pendingProduct),\r\n           });\r\n             if (!res.ok) {\r\n               throw new Error('Failed to create product');\r\n           }\r\n             // Clear form and show success message\r\n           setFormData({\r\n               name: '',\r\n               desc: '',\r\n               price: '',\r\n               image: ''\r\n           });\r\n           setErrors({\r\n               name: '',\r\n               desc: '',\r\n               price: '',\r\n               image: ''\r\n           });\r\n           setSuccessMessage('Product has been successfully added to the database!');\r\n             // Clear success message after 5 seconds\r\n           setTimeout(() => {\r\n               setSuccessMessage('');\r\n           }, 5000);\r\n       } catch (error) {\r\n           setGeneralError('Failed to create product. Please try again.');\r\n           setTimeout(() => {\r\n               setGeneralError('');\r\n           }, 3000);\r\n       } finally {\r\n           setShowDuplicateConfirm(false);\r\n           setPendingProduct(null);\r\n       }\r\n   };\r\n     const handleDuplicateCancel = () => {\r\n       setShowDuplicateConfirm(false);\r\n       setPendingProduct(null);\r\n   };\r\n  */\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [successMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"success-message\",\n      children: successMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 17\n    }, this), generalError && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: generalError\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(FormFields, {\n      formData: formData,\n      errors: errors,\n      setErrors: setErrors,\n      setGeneralError: setGeneralError,\n      setFormData: setFormData,\n      setSuccessMessage: setSuccessMessage,\n      setShowDuplicateConfirm: setShowDuplicateConfirm\n      /* setPendingProduct={setPendingProduct}*/,\n      validateGeneralCriteria: validateGeneralCriteria,\n      handleSubmit: handleSubmit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n// Component for form fields with error handling\n_c = GeneralMessages;\nconst FormFields = ({\n  formData,\n  errors,\n  setErrors,\n  setGeneralError,\n  setFormData,\n  setSuccessMessage,\n  setShowDuplicateConfirm,\n  /* setPendingProduct,*/\n  validateGeneralCriteria,\n  handleSubmit\n}) => {\n  // Change data to store for data and error\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n    // Clear error when user starts typing\n    if (errors[name]) {\n      setErrors(prev => ({\n        ...prev,\n        [name]: ''\n      }));\n    }\n  };\n\n  // Validate forms (in criteria for each fields)\n  /* const validateFormFields = () => {\r\n       let isValid = true;\r\n       const newErrors = {\r\n           name: '',\r\n           desc: '',\r\n           price: '',\r\n           image: ''\r\n       };\r\n       console.log(\"oke nha bro)\");\r\n       // Name validation\r\n       if (!formData.name.trim()) {\r\n           newErrors.name = 'Product name is required';\r\n           isValid = false;\r\n       }\r\n         // Description validation\r\n       if (!formData.desc.trim()) {\r\n           newErrors.desc = 'Description is required';\r\n           isValid = false;\r\n       }\r\n         // Price validation\r\n       if (!formData.price) {\r\n           newErrors.price = 'Price is required';\r\n           isValid = false;\r\n       } else {\r\n           const price = parseFloat(formData.price);\r\n           if (isNaN(price)) {\r\n               newErrors.price = 'Price must be a valid number';\r\n               isValid = false;\r\n           } else if (price <= 0) {\r\n               newErrors.price = 'Price must be greater than 0';\r\n               isValid = false;\r\n           } else if (price > 1000000) { // Set a reasonable maximum price\r\n               newErrors.price = 'Price must be less than 1,000,000';\r\n               isValid = false;\r\n           } else if (price.toString().includes('e')) {\r\n               newErrors.price = 'Price cannot be in scientific notation';\r\n               isValid = false;\r\n           }\r\n       }\r\n         // Image URL validation\r\n       if (!formData.image.trim()) {\r\n           newErrors.image = 'Image URL is required';\r\n           isValid = false;\r\n       } else if (!isValidUrl(formData.image)) {\r\n           newErrors.image = 'Please enter a valid URL';\r\n           isValid = false;\r\n       }\r\n         setErrors(newErrors);\r\n       return isValid;\r\n   };\r\n     const isValidUrl = (url) => {\r\n       try {\r\n           new URL(url);\r\n           return true;\r\n       } catch {\r\n           return false;\r\n       }\r\n   };*/\n\n  const handleReset = () => {\n    // Check if form has any data\n    if (!validateGeneralCriteria(setGeneralError, 'There is nothing to reset')) {\n      // If form has data, proceed with reset\n      setFormData({\n        name: '',\n        desc: '',\n        price: '',\n        image: ''\n      });\n      setErrors({\n        name: '',\n        desc: '',\n        price: '',\n        image: ''\n      });\n    }\n    setSuccessMessage(''); // Clear success message on reset\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit(validateFormFields)\n    /*{(e) => {\r\n        e.preventDefault();\r\n    }}*/,\n    onReset: handleReset,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"name\",\n        placeholder: \"Enter product name\",\n        value: formData.name,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 17\n      }, this), errors.name && /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"error\",\n        children: errors.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 33\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Description\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"desc\",\n        placeholder: \"Enter product description\",\n        value: formData.desc,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 17\n      }, this), errors.desc && /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"error\",\n        children: errors.desc\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 33\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Price\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        name: \"price\",\n        placeholder: \"Enter price\",\n        value: formData.price,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 17\n      }, this), errors.price && /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"error\",\n        children: errors.price\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 34\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Image URL\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"image\",\n        placeholder: \"Enter image URL\",\n        value: formData.image,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 17\n      }, this), errors.image && /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"error\",\n        children: errors.image\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 34\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"UpdateButton\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"reset\",\n        children: \"Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 227,\n    columnNumber: 9\n  }, this);\n};\n\n// Main CreateForm component\n_c2 = FormFields;\nfunction CreateForm() {\n  _s();\n  const [formData, setFormData] = useState({\n    name: '',\n    desc: '',\n    price: '',\n    image: ''\n  });\n  const [errors, setErrors] = useState({\n    name: '',\n    desc: '',\n    price: '',\n    image: ''\n  });\n  const [successMessage, setSuccessMessage] = useState('');\n  const [generalError, setGeneralError] = useState('');\n  const [showDuplicateConfirm, setShowDuplicateConfirm] = useState(false);\n  /* const [pendingProduct, setPendingProduct] = useState(null);*/\n\n  const handlePush = async newProduct => {\n    const res = await fetch(\"http://localhost:8080/products\", {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(newProduct)\n    });\n    const result = await res.json();\n    if (!res.ok) {\n      // Handle duplicate name error\n      if (result.error && result.error.includes('already exists')) {\n        /*  setPendingProduct(newProduct);\r\n          setShowDuplicateConfirm(true);*/\n        return;\n      }\n\n      // Handle other specific error messages from backend\n      /*     if (result.error) {\r\n              setErrors(prev => ({\r\n                  ...prev,\r\n                  name: result.error.includes('name') ? result.error : '',\r\n                  desc: result.error.includes('description') ? result.error : '',\r\n                  price: result.error.includes('price') ? result.error : '',\r\n                  image: result.error.includes('image') ? result.error : ''\r\n              }));\r\n          }\r\n          throw new Error(result.error || 'Failed to create product');*/\n    }\n  };\n\n  // Validate forms (in criteria general)\n  const validateGeneralCriteria = (setGeneralMessage, message) => {\n    // Check if ALL fields are empty\n    const allFieldsEmpty = !formData.name.trim() && !formData.desc.trim() && !formData.price && !formData.image.trim();\n    if (allFieldsEmpty) {\n      setGeneralMessage(message);\n      // Clear individual field errors\n      setErrors({\n        name: '',\n        desc: '',\n        price: '',\n        image: ''\n      });\n      // Clear the message after 3 seconds\n      setTimeout(() => {\n        setGeneralMessage('');\n      }, 3000);\n      return true;\n    }\n    setGeneralMessage('');\n    return false;\n  };\n\n  // Handle submit (comparing database and push)\n  const handleSubmit = validateFormFields => async e => {\n    e.preventDefault();\n    const newProduct = {\n      name: formData.name,\n      desc: formData.desc,\n      price: parseFloat(formData.price),\n      image: formData.image\n    };\n    try {\n      if (!validateGeneralCriteria(setGeneralError, 'Please fill in all required fields')) {\n        console.log(\"oke nha bro ngoai if)\");\n        if (validateFormFields) {\n          handlePush(newProduct);\n          console.log(\"oke nha brotrong if)\");\n          // Clear form on success\n          setFormData({\n            name: '',\n            desc: '',\n            price: '',\n            image: ''\n          });\n\n          // Set success message\n          setSuccessMessage('Product has been successfully added to the database!');\n\n          // Clear success message after 5 seconds\n          setTimeout(() => {\n            setSuccessMessage('');\n          }, 5000);\n        }\n      }\n      setErrors({\n        name: '',\n        desc: '',\n        price: '',\n        image: ''\n      });\n    } catch (error) {\n      console.error('Error creating product:', error);\n      // Show error message to user\n      setGeneralError(error.message || 'Failed to create product. Please try again.');\n      // Clear error message after 3 seconds\n      setTimeout(() => {\n        setGeneralError('');\n      }, 3000);\n    }\n  };\n\n  // Handle reset\n  const handleReset = () => {\n    // Check if form has any data\n    const hasData = formData.name.trim() || formData.desc.trim() || formData.price || formData.image.trim();\n    if (!hasData) {\n      setGeneralError('There is nothing to reset - form is already empty');\n      setTimeout(() => {\n        setGeneralError('');\n      }, 3000);\n      return;\n    }\n\n    // If form has data, proceed with reset\n    setFormData({\n      name: '',\n      desc: '',\n      price: '',\n      image: ''\n    });\n    setErrors({\n      name: '',\n      desc: '',\n      price: '',\n      image: ''\n    });\n    setSuccessMessage(''); // Clear success message on reset\n    setGeneralError(''); // Clear general error on reset\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"create\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"createForm\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Create New Product\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 460,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(GeneralMessages, {\n        successMessage: successMessage,\n        generalError: generalError,\n        showDuplicateConfirm: showDuplicateConfirm,\n        setShowDuplicateConfirm: setShowDuplicateConfirm\n        /*   setPendingProduct={setPendingProduct}*/,\n        setFormData: setFormData,\n        setErrors: setErrors,\n        setSuccessMessage: setSuccessMessage,\n        setGeneralError: setGeneralError,\n        formData: formData,\n        errors: errors,\n        handleSubmit: handleSubmit,\n        validateGeneralCriteria: validateGeneralCriteria\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 462,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 459,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 458,\n    columnNumber: 9\n  }, this);\n}\n_s(CreateForm, \"1ij2F5EZ/YlFaAPZ6xuxkvZpx/M=\");\n_c3 = CreateForm;\nexport default CreateForm;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"GeneralMessages\");\n$RefreshReg$(_c2, \"FormFields\");\n$RefreshReg$(_c3, \"CreateForm\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","GeneralMessages","successMessage","generalError","showDuplicateConfirm","setShowDuplicateConfirm","setFormData","setErrors","setSuccessMessage","setGeneralError","formData","errors","handleSubmit","validateGeneralCriteria","children","className","fileName","_jsxFileName","lineNumber","columnNumber","FormFields","_c","handleChange","e","name","value","target","prev","handleReset","desc","price","image","onSubmit","validateFormFields","onReset","type","placeholder","onChange","_c2","CreateForm","_s","handlePush","newProduct","res","fetch","method","headers","body","JSON","stringify","result","json","ok","error","includes","setGeneralMessage","message","allFieldsEmpty","trim","setTimeout","preventDefault","parseFloat","console","log","hasData","_c3","$RefreshReg$"],"sources":["C:/Users/Admin/Documents/Coding/react-sendo-proj-1/study_react/src/components/bar-form/CreateForm.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport './CreateForm.css';\r\n\r\n// Component for general messages (success and error)\r\nconst GeneralMessages = ({\r\n    successMessage,\r\n    generalError,\r\n    showDuplicateConfirm,\r\n    setShowDuplicateConfirm,\r\n    /*setPendingProduct,*/\r\n    setFormData,\r\n    setErrors,\r\n    setSuccessMessage,\r\n    setGeneralError,\r\n    formData,\r\n    errors,\r\n    handleSubmit,\r\n    validateGeneralCriteria\r\n}) => {\r\n\r\n\r\n\r\n   /* const handleDuplicateConfirm = async (pendingProduct) => {\r\n        try {\r\n            const res = await fetch(\"http://localhost:8080/products\", {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify(pendingProduct),\r\n            });\r\n\r\n            if (!res.ok) {\r\n                throw new Error('Failed to create product');\r\n            }\r\n\r\n            // Clear form and show success message\r\n            setFormData({\r\n                name: '',\r\n                desc: '',\r\n                price: '',\r\n                image: ''\r\n            });\r\n            setErrors({\r\n                name: '',\r\n                desc: '',\r\n                price: '',\r\n                image: ''\r\n            });\r\n            setSuccessMessage('Product has been successfully added to the database!');\r\n\r\n            // Clear success message after 5 seconds\r\n            setTimeout(() => {\r\n                setSuccessMessage('');\r\n            }, 5000);\r\n        } catch (error) {\r\n            setGeneralError('Failed to create product. Please try again.');\r\n            setTimeout(() => {\r\n                setGeneralError('');\r\n            }, 3000);\r\n        } finally {\r\n            setShowDuplicateConfirm(false);\r\n            setPendingProduct(null);\r\n        }\r\n    };\r\n\r\n    const handleDuplicateCancel = () => {\r\n        setShowDuplicateConfirm(false);\r\n        setPendingProduct(null);\r\n    };\r\n*/\r\n    return (\r\n        <>\r\n            {successMessage && (\r\n                <div className=\"success-message\">\r\n                    {successMessage}\r\n                </div>\r\n            )}\r\n            {generalError && (\r\n                <div className=\"error-message\">\r\n                    {generalError}\r\n                </div>\r\n            )}\r\n           {/*showDuplicateConfirm && (\r\n                <div className=\"duplicate-confirm\">\r\n                    <p>A product with this name already exists. Do you want to add it anyway?</p>\r\n                    <div className=\"confirm-buttons\">\r\n                        <button onClick={() => handleDuplicateConfirm(pendingProduct)}>Yes, Add Anyway</button>\r\n                        <button onClick={handleDuplicateCancel}>No, Cancel</button>\r\n                    </div>\r\n                </div>\r\n            )*/}\r\n            <FormFields formData={formData}\r\n                    errors={errors}\r\n                    setErrors={setErrors}\r\n                    setGeneralError={setGeneralError}\r\n                    setFormData={setFormData}\r\n                    setSuccessMessage={setSuccessMessage}\r\n                    setShowDuplicateConfirm={setShowDuplicateConfirm}\r\n                   /* setPendingProduct={setPendingProduct}*/\r\n                    validateGeneralCriteria={validateGeneralCriteria}\r\n                    handleSubmit={handleSubmit}>\r\n\r\n                    </FormFields>\r\n        </>\r\n    );\r\n};\r\n\r\n// Component for form fields with error handling\r\nconst FormFields = ({\r\n    formData,\r\n    errors,\r\n    setErrors,\r\n    setGeneralError,\r\n    setFormData,\r\n    setSuccessMessage,\r\n    setShowDuplicateConfirm,\r\n   /* setPendingProduct,*/\r\n    validateGeneralCriteria,\r\n    handleSubmit\r\n}) => {\r\n\r\n    // Change data to store for data and error\r\n    const handleChange = (e) => {\r\n        const { name, value } = e.target;\r\n        setFormData(prev => ({\r\n            ...prev,\r\n            [name]: value\r\n        }));\r\n        // Clear error when user starts typing\r\n        if (errors[name]) {\r\n            setErrors(prev => ({\r\n                ...prev,\r\n                [name]: ''\r\n            }));\r\n        }\r\n    };\r\n\r\n    // Validate forms (in criteria for each fields)\r\n   /* const validateFormFields = () => {\r\n        let isValid = true;\r\n        const newErrors = {\r\n            name: '',\r\n            desc: '',\r\n            price: '',\r\n            image: ''\r\n        };\r\n        console.log(\"oke nha bro)\");\r\n        // Name validation\r\n        if (!formData.name.trim()) {\r\n            newErrors.name = 'Product name is required';\r\n            isValid = false;\r\n        }\r\n\r\n        // Description validation\r\n        if (!formData.desc.trim()) {\r\n            newErrors.desc = 'Description is required';\r\n            isValid = false;\r\n        }\r\n\r\n        // Price validation\r\n        if (!formData.price) {\r\n            newErrors.price = 'Price is required';\r\n            isValid = false;\r\n        } else {\r\n            const price = parseFloat(formData.price);\r\n            if (isNaN(price)) {\r\n                newErrors.price = 'Price must be a valid number';\r\n                isValid = false;\r\n            } else if (price <= 0) {\r\n                newErrors.price = 'Price must be greater than 0';\r\n                isValid = false;\r\n            } else if (price > 1000000) { // Set a reasonable maximum price\r\n                newErrors.price = 'Price must be less than 1,000,000';\r\n                isValid = false;\r\n            } else if (price.toString().includes('e')) {\r\n                newErrors.price = 'Price cannot be in scientific notation';\r\n                isValid = false;\r\n            }\r\n        }\r\n\r\n        // Image URL validation\r\n        if (!formData.image.trim()) {\r\n            newErrors.image = 'Image URL is required';\r\n            isValid = false;\r\n        } else if (!isValidUrl(formData.image)) {\r\n            newErrors.image = 'Please enter a valid URL';\r\n            isValid = false;\r\n        }\r\n\r\n        setErrors(newErrors);\r\n        return isValid;\r\n    };\r\n\r\n    const isValidUrl = (url) => {\r\n        try {\r\n            new URL(url);\r\n            return true;\r\n        } catch {\r\n            return false;\r\n        }\r\n    };*/\r\n\r\n    const handleReset = () => {\r\n        // Check if form has any data\r\n        if(!validateGeneralCriteria(setGeneralError,'There is nothing to reset'))\r\n        {\r\n            // If form has data, proceed with reset\r\n        setFormData({\r\n            name: '',\r\n            desc: '',\r\n            price: '',\r\n            image: ''\r\n        });\r\n        setErrors({\r\n            name: '',\r\n            desc: '',\r\n            price: '',\r\n            image: ''\r\n        });\r\n        }\r\n        setSuccessMessage(''); // Clear success message on reset\r\n    }\r\n\r\n\r\n    return (\r\n        <form onSubmit = {handleSubmit(validateFormFields)}\r\n        /*{(e) => {\r\n            e.preventDefault();\r\n        }}*/\r\n            onReset={handleReset}>\r\n            <div className='form-group'>\r\n                <label>Name</label>\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"name\"\r\n                    placeholder=\"Enter product name\"\r\n                    value={formData.name}\r\n                    onChange={handleChange}\r\n                />\r\n                {errors.name && <span className=\"error\">{errors.name}</span>}\r\n            </div>\r\n            <div className='form-group'>\r\n                <label>Description</label>\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"desc\"\r\n                    placeholder=\"Enter product description\"\r\n                    value={formData.desc}\r\n                    onChange={handleChange}\r\n                />\r\n                {errors.desc && <span className=\"error\">{errors.desc}</span>}\r\n            </div>\r\n            <div className='form-group'>\r\n                <label>Price</label>\r\n                <input\r\n                    type=\"number\"\r\n                    name=\"price\"\r\n                    placeholder=\"Enter price\"\r\n                    value={formData.price}\r\n                    onChange={handleChange}\r\n                />\r\n                {errors.price && <span className=\"error\">{errors.price}</span>}\r\n            </div>\r\n            <div className='form-group'>\r\n                <label>Image URL</label>\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"image\"\r\n                    placeholder=\"Enter image URL\"\r\n                    value={formData.image}\r\n                    onChange={handleChange}\r\n                />\r\n                {errors.image && <span className=\"error\">{errors.image}</span>}\r\n            </div>\r\n            <div className=\"UpdateButton\">\r\n                <button type=\"submit\">Save</button>\r\n                <button type=\"reset\">Reset</button>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\n// Main CreateForm component\r\nfunction CreateForm() {\r\n    const [formData, setFormData] = useState({\r\n        name: '',\r\n        desc: '',\r\n        price: '',\r\n        image: ''\r\n    });\r\n\r\n    const [errors, setErrors] = useState({\r\n        name: '',\r\n        desc: '',\r\n        price: '',\r\n        image: ''\r\n    });\r\n\r\n    const [successMessage, setSuccessMessage] = useState('');\r\n    const [generalError, setGeneralError] = useState('');\r\n    const [showDuplicateConfirm, setShowDuplicateConfirm] = useState(false);\r\n   /* const [pendingProduct, setPendingProduct] = useState(null);*/\r\n\r\n   const handlePush = async (newProduct) => {\r\n\r\n   const res = await fetch(\"http://localhost:8080/products\", {\r\n    method: 'POST',\r\n    headers: {\r\n        'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify(newProduct),\r\n});\r\n\r\nconst result = await res.json();\r\n\r\nif (!res.ok) {\r\n    // Handle duplicate name error\r\n    if (result.error && result.error.includes('already exists')) {\r\n      /*  setPendingProduct(newProduct);\r\n        setShowDuplicateConfirm(true);*/\r\n        return;\r\n    }\r\n\r\n    // Handle other specific error messages from backend\r\n/*     if (result.error) {\r\n        setErrors(prev => ({\r\n            ...prev,\r\n            name: result.error.includes('name') ? result.error : '',\r\n            desc: result.error.includes('description') ? result.error : '',\r\n            price: result.error.includes('price') ? result.error : '',\r\n            image: result.error.includes('image') ? result.error : ''\r\n        }));\r\n    }\r\n    throw new Error(result.error || 'Failed to create product');*/\r\n}\r\n   }\r\n\r\n       // Validate forms (in criteria general)\r\n       const validateGeneralCriteria = (setGeneralMessage, message) => {\r\n        // Check if ALL fields are empty\r\n        const allFieldsEmpty = !formData.name.trim() &&\r\n            !formData.desc.trim() &&\r\n            !formData.price &&\r\n            !formData.image.trim();\r\n\r\n        if (allFieldsEmpty) {\r\n            setGeneralMessage(message);\r\n            // Clear individual field errors\r\n            setErrors({\r\n                name: '',\r\n                desc: '',\r\n                price: '',\r\n                image: ''\r\n            });\r\n            // Clear the message after 3 seconds\r\n            setTimeout(() => {\r\n                setGeneralMessage('');\r\n            }, 3000);\r\n            return true;\r\n        }\r\n        setGeneralMessage('');\r\n        return false;\r\n    };\r\n\r\n    // Handle submit (comparing database and push)\r\n    const handleSubmit = (validateFormFields) => async (e) => {\r\n        e.preventDefault();\r\n\r\n\r\n\r\n        const newProduct = {\r\n            name: formData.name,\r\n            desc: formData.desc,\r\n            price: parseFloat(formData.price),\r\n            image: formData.image\r\n        };\r\n\r\n        try {\r\n            \r\n            if(!validateGeneralCriteria(setGeneralError,'Please fill in all required fields'))\r\n            {\r\n                    console.log(\"oke nha bro ngoai if)\");\r\n                if(validateFormFields){\r\n                handlePush(newProduct);\r\n                    console.log(\"oke nha brotrong if)\");\r\n                // Clear form on success\r\n                setFormData({\r\n                    name: '',\r\n                    desc: '',\r\n                    price: '',\r\n                    image: ''\r\n                });\r\n\r\n            // Set success message\r\n            setSuccessMessage('Product has been successfully added to the database!');\r\n\r\n            // Clear success message after 5 seconds\r\n            setTimeout(() => {\r\n                setSuccessMessage('');\r\n            }, 5000);\r\n\r\n                }\r\n\r\n            }\r\n            \r\n\r\n            setErrors({\r\n                name: '',\r\n                desc: '',\r\n                price: '',\r\n                image: ''\r\n            });\r\n\r\n\r\n        } catch (error) {\r\n            console.error('Error creating product:', error);\r\n            // Show error message to user\r\n            setGeneralError(error.message || 'Failed to create product. Please try again.');\r\n            // Clear error message after 3 seconds\r\n            setTimeout(() => {\r\n                setGeneralError('');\r\n            }, 3000);\r\n        }\r\n    };\r\n\r\n    // Handle reset\r\n    const handleReset = () => {\r\n        // Check if form has any data\r\n        const hasData = formData.name.trim() || formData.desc.trim() || formData.price || formData.image.trim();\r\n\r\n        if (!hasData) {\r\n            setGeneralError('There is nothing to reset - form is already empty');\r\n            setTimeout(() => {\r\n                setGeneralError('');\r\n            }, 3000);\r\n            return;\r\n        }\r\n\r\n        // If form has data, proceed with reset\r\n        setFormData({\r\n            name: '',\r\n            desc: '',\r\n            price: '',\r\n            image: ''\r\n        });\r\n        setErrors({\r\n            name: '',\r\n            desc: '',\r\n            price: '',\r\n            image: ''\r\n        });\r\n        setSuccessMessage(''); // Clear success message on reset\r\n        setGeneralError(''); // Clear general error on reset\r\n    };\r\n\r\n    return (\r\n        <div className=\"create\">\r\n            <div className='createForm'>\r\n                <h2>Create New Product</h2>\r\n\r\n                <GeneralMessages\r\n                    successMessage={successMessage}\r\n                    generalError={generalError}\r\n                    showDuplicateConfirm={showDuplicateConfirm}\r\n                    setShowDuplicateConfirm={setShowDuplicateConfirm}\r\n                 /*   setPendingProduct={setPendingProduct}*/\r\n                    setFormData={setFormData}\r\n                    setErrors={setErrors}\r\n                    setSuccessMessage={setSuccessMessage}\r\n                    setGeneralError={setGeneralError}\r\n                    formData={formData}\r\n                    errors={errors}\r\n                    handleSubmit = {handleSubmit}\r\n                    validateGeneralCriteria = {validateGeneralCriteria}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default CreateForm;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}